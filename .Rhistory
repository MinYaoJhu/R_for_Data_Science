summarize(mean_x = mean(x))
df |>
group_by(y, z) |>
summarize(mean_x = mean(x))
df |>
group_by(y, z) |>
summarize(mean_x = mean(x), .groups = "drop")
df |>
group_by(y, z) |>
summarize(mean_x = mean(x))
df |>
group_by(y, z) |>
summarize(mean_x = mean(x))
df |>
group_by(y, z) |>
mutate(mean_x = mean(x))
df |>
group_by(y, z) |>
summarize(mean_x = mean(x))
df |>
group_by(y, z) |>
mutate(mean_x = mean(x))
install.packages("styler")
library(styler)
#| label: fig-styler
#| echo: false
#| out-width: null
#| fig-cap: >
#|   RStudio's command palette makes it easy to access every RStudio command
#|   using only the keyboard.
#| fig-alt: >
#|   A screenshot showing the command palette after typing "styler", showing
#|   the four styling tool provided by the package.
knitr::include_graphics("screenshots/rstudio-palette.png")
#| label: setup
#| message: false
library(tidyverse)
library(nycflights13)
#| label: fig-rstudio-sections
#| echo: false
#| out-width: null
#| fig-cap: >
#|   After adding sectioning comments to your script, you can
#|   easily navigate to them using the code navigation tool in the
#|   bottom-left of the script editor.
knitr::include_graphics("screenshots/rstudio-nav.png")
#| eval: false
flights|>filter(dest=="IAH")|>group_by(year,month,day)|>summarize(n=n(),
delay=mean(arr_delay,na.rm=TRUE))|>filter(n>10)
flights|>filter(carrier=="UA",dest%in%c("IAH","HOU"),sched_dep_time>
0900,sched_arr_time<2000)|>group_by(flight)|>summarize(delay=mean(
arr_delay,na.rm=TRUE),cancelled=sum(is.na(arr_delay)),n=n())|>filter(n>10)
install.packages(c("blaster", "httpuv", "httr", "httr2", "spatstat.explore", "spatstat.geom", "spatstat.random", "spatstat.utils", "tzdb", "waldo", "wk"))
styler:::style_selection()
styler:::set_style_transformers()
styler:::style_selection()
styler:::style_selection()
#| label: setup
#| message: false
library(tidyverse)
#| echo: false
table2 <- table1 |>
pivot_longer(cases:population, names_to = "type", values_to = "count")
table3 <- table2 |>
pivot_wider(names_from = year, values_from = count)
table1
table2
table3
#| fig-width: 5
#| fig-alt: >
#|   This figure shows the number of cases in 1999 and 2000 for
#|   Afghanistan, Brazil, and China, with year on the x-axis and number
#|   of cases on the y-axis. Each point on the plot represents the number
#|   of cases in a given country in a given year. The points for each
#|   country are differentiated from others by color and shape and connected
#|   with a line, resulting in three, non-parallel, non-intersecting lines.
#|   The numbers of cases in China are highest for both 1999 and 2000, with
#|   values above 200,000 for both years. The number of cases in Brazil is
#|   approximately 40,000 in 1999 and approximately 75,000 in 2000. The
#|   numbers of cases in Afghanistan are lowest for both 1999 and 2000, with
#|   values that appear to be very close to 0 on this scale.
# Compute rate per 10,000
table1 |>
mutate(rate = cases / population * 10000)
# Compute total cases per year
table1 |>
group_by(year) |>
summarize(total_cases = sum(cases))
# Visualize changes over time
ggplot(table1, aes(x = year, y = cases)) +
geom_line(aes(group = country), color = "grey50") +
geom_point(aes(color = country, shape = country)) +
scale_x_continuous(breaks = c(1999, 2000)) # x-axis breaks at 1999 and 2000
table1
table2
table3
str(table2)
str(table3)
t2_cases <- filter(table2, type == "cases") %>%
rename(cases = count) %>%
arrange(country, year)
t2_cases <- filter(table2, type == "cases") %>%
rename(cases = count) %>%
arrange(country, year)
t2_cases
t2_population <- filter(table2, type == "population") %>%
rename(population = count) %>%
arrange(country, year)
t2_population
merge(t2_cases,t2_population,by=c("country","year"))
merge(t2_cases,t2_population,by=c("country","year")) |>
select(-c(type.x,type.y))
merge(t2_cases,t2_population,by=c("country","year")) |>
select(-c(type.x,type.y)) |>
mutate(cases_per_cap = (cases / population) * 10000)
merge(t2_cases,t2_population,by=c("country","year")) |>
select(-c(type.x,type.y)) |>
mutate(cases_per_cap = (cases / population) * 10000) |>
select(country, year, cases_per_cap)
merge(t2_cases,t2_population,by=c("country","year")) |>
select(-c(type.x,type.y))
str(table3)
table3
table2
t2_population <- filter(table2, type == "population") |>
rename(population = count) |>
arrange(country, year)
t2_population
t2_cases <- filter(table2, type == "cases") |>
rename(cases = count) |>
arrange(country, year)
t2_cases
t2_cases_per_cap <- merge(t2_cases,t2_population,by=c("country","year")) |>
select(-c(type.x,type.y)) |>
mutate(cases_per_cap = (cases / population) * 10000) |>
select(country, year, cases_per_cap)
t2_cases_per_cap
t2_cases_per_cap <- t2_cases_per_cap %>%
mutate(type = "cases_per_cap") %>%
rename(count = cases_per_cap)
t2_cases_per_cap
t2_cases_per_cap <- merge(t2_cases,t2_population,by=c("country","year")) |>
select(-c(type.x,type.y)) |>
mutate(cases_per_cap = (cases / population) * 10000) |>
select(country, year, cases_per_cap)
t2_cases_per_cap
t2_cases_per_cap <- t2_cases_per_cap %>%
mutate(type = "cases_per_cap") %>%
rename(count = cases_per_cap)
bind_rows(table2, t2_cases_per_cap) %>%
arrange(country, year, type, count)
table3
t2_cases_per_cap <- t2_cases_per_cap %>%
mutate(type = "cases_per_cap") %>%
rename(count = cases_per_cap)
t2_cases_per_cap
t3_cases <- filter(table3, type == "cases") |>
rename(cases = count) |>
arrange(country, year)
t3_cases <- filter(table3, type == "cases") |>
arrange(country, year)
t3_cases <- filter(table3, type == "cases") |>
arrange(country)
t3_cases
```{r}
t3_cases <- filter(table3, type == "population") |>
arrange(country)
t3_cases
t3_cases <- filter(table3, type == "cases") |>
arrange(country)
t3_cases
t3_population <- filter(table3, type == "population") |>
arrange(country)
t3_population
t3_cases_per_cap <-
tibble(
country = t3_cases$country,
`1999` = t3_cases[["1999"]] / t3_population[["1999"]] * 10000,
`2000` = t3_cases[["2000"]] / t3_population[["2000"]] * 10000
)
t3_cases_per_cap
billboard
billboard |>
pivot_longer(
cols = starts_with("wk"),
names_to = "week",
values_to = "rank"
)
billboard |>
pivot_longer(
cols = starts_with("wk"),
names_to = "week",
values_to = "rank",
values_drop_na = TRUE
)
billboard_longer <- billboard |>
pivot_longer(
cols = starts_with("wk"),
names_to = "week",
values_to = "rank",
values_drop_na = TRUE
) |>
mutate(
week = parse_number(week)
)
billboard_longer
#| label: fig-billboard-ranks
#| fig-cap: >
#|   A line plot showing how the rank of a song changes over time.
#| fig-alt: >
#|   A line plot with week on the x-axis and rank on the y-axis, where
#|   each line represents a song. Most songs appear to start at a high rank,
#|   rapidly accelerate to a low rank, and then decay again. There are
#|   surprisingly few tracks in the region when week is >20 and rank is
#|   >50.
billboard_longer |>
ggplot(aes(x = week, y = rank, group = track)) +
geom_line(alpha = 0.25) +
scale_y_reverse()
df <- tribble(
~id,  ~bp1, ~bp2,
"A",  100,  120,
"B",  140,  115,
"C",  120,  125
)
df
df |>
pivot_longer(
cols = bp1:bp2,
names_to = "measurement",
values_to = "value"
)
#| label: fig-pivot-variables
#| echo: false
#| fig-cap: >
#|   Columns that are already variables need to be repeated, once for
#|   each column that is pivotted.
#| fig-alt: >
#|   A diagram showing how `pivot_longer()` transforms a simple
#|   dataset, using color to highlight how the values in the `id` column
#|   ("A", "B", "C") are each repeated twice in the output because there are
#|   two columns being pivotted ("bp1" and "bp2").
knitr::include_graphics("diagrams/tidy-data/variables.png", dpi = 270)
#| label: fig-pivot-names
#| echo: false
#| fig-cap: >
#|   The column names of pivoted columns become values in a new column. The
#|   values need to be repeated once for each row of the original dataset.
#| fig-alt: >
#|   A diagram showing how `pivot_longer()` transforms a simple
#|   data set, using color to highlight how column names ("bp1" and
#|   "bp2") become the values in a new `measurement` column. They are repeated
#|   three times because there were three rows in the input.
knitr::include_graphics("diagrams/tidy-data/column-names.png", dpi = 270)
#| label: fig-pivot-values
#| echo: false
#| fig-cap: >
#|   The number of values is preserved (not repeated), but unwound
#|   row-by-row.
#| fig-alt: >
#|   A diagram showing how `pivot_longer()` transforms data,
#|   using color to highlight how the cell values (blood pressure measurements)
#|   become the values in a new `value` column. They are unwound row-by-row,
#|   so the original rows (100,120), then (140,115), then (120,125), become
#|   a column running from 100 to 125.
knitr::include_graphics("diagrams/tidy-data/cell-values.png", dpi = 270)
who2
who2 |>
pivot_longer(
cols = !(country:year),
names_to = c("diagnosis", "gender", "age"),
names_sep = "_",
values_to = "count"
)
#| label: fig-pivot-multiple-names
#| echo: false
#| fig-cap: >
#|   Pivoting columns with multiple pieces of information in the names
#|   means that each column name now fills in values in multiple output
#|   columns.
#| fig-alt: >
#|   A diagram that uses color to illustrate how supplying `names_sep`
#|   and multiple `names_to` creates multiple variables in the output.
#|   The input has variable names "x_1" and "y_2" which are split up
#|   by "_" to create name and number columns in the output. This is
#|   is similar case with a single `names_to`, but what would have been a
#|   single output variable is now separated into multiple variables.
knitr::include_graphics("diagrams/tidy-data/multiple-names.png", dpi = 270)
household
household |>
pivot_longer(
cols = !family,
names_to = c(".value", "child"),
names_sep = "_",
values_drop_na = TRUE
)
#| label: fig-pivot-names-and-values
#| echo: false
#| fig-cap: >
#|   Pivoting with `names_to = c(".value", "id")` splits the column names
#|   into two components: the first part determines the output column
#|   name (`x` or `y`), and the second part determines the value of the
#|   `id` column.
#| fig-alt: >
#|   A diagram that uses color to illustrate how the special ".value"
#|   sentinel works. The input has names "x_1", "x_2", "y_1", and "y_2",
#|   and we want to use the first component ("x", "y") as a variable name
#|   and the second ("1", "2") as the value for a new "id" column.
knitr::include_graphics("diagrams/tidy-data/names-and-values.png", dpi = 270)
cms_patient_experience
cms_patient_experience |>
distinct(measure_cd, measure_title)
cms_patient_experience |>
pivot_wider(
names_from = measure_cd,
values_from = prf_rate
)
cms_patient_experience |>
pivot_wider(
id_cols = starts_with("org"),
names_from = measure_cd,
values_from = prf_rate
)
df <- tribble(
~id, ~measurement, ~value,
"A",        "bp1",    100,
"B",        "bp1",    140,
"B",        "bp2",    115,
"A",        "bp2",    120,
"A",        "bp3",    105
)
df
df |>
pivot_wider(
names_from = measurement,
values_from = value
)
df |>
distinct(measurement) |>
pull()
#| label: setup
#| message: false
library(tidyverse)
#| echo: false
table2 <- table1 |>
pivot_longer(cases:population, names_to = "type", values_to = "count")
table3 <- table2 |>
pivot_wider(names_from = year, values_from = count)
table1
table2
table3
#| label: fig-tidy-structure
#| echo: false
#| fig-cap: >
#|   The following three rules make a dataset tidy: variables are columns,
#|   observations are rows, and values are cells.
#| fig-alt: >
#|   Three panels, each representing a tidy data frame. The first panel
#|   shows that each variable is a column. The second panel shows that each
#|   observation is a row. The third panel shows that each value is
#|   a cell.
knitr::include_graphics("images/tidy-1.png", dpi = 270)
#| fig-width: 5
#| fig-alt: >
#|   This figure shows the number of cases in 1999 and 2000 for
#|   Afghanistan, Brazil, and China, with year on the x-axis and number
#|   of cases on the y-axis. Each point on the plot represents the number
#|   of cases in a given country in a given year. The points for each
#|   country are differentiated from others by color and shape and connected
#|   with a line, resulting in three, non-parallel, non-intersecting lines.
#|   The numbers of cases in China are highest for both 1999 and 2000, with
#|   values above 200,000 for both years. The number of cases in Brazil is
#|   approximately 40,000 in 1999 and approximately 75,000 in 2000. The
#|   numbers of cases in Afghanistan are lowest for both 1999 and 2000, with
#|   values that appear to be very close to 0 on this scale.
# Compute rate per 10,000
table1 |>
mutate(rate = cases / population * 10000)
# Compute total cases per year
table1 |>
group_by(year) |>
summarize(total_cases = sum(cases))
# Visualize changes over time
ggplot(table1, aes(x = year, y = cases)) +
geom_line(aes(group = country), color = "grey50") +
geom_point(aes(color = country, shape = country)) +
scale_x_continuous(breaks = c(1999, 2000)) # x-axis breaks at 1999 and 2000
table1
table2
table3
table2
t2_cases <- filter(table2, type == "cases") |>
rename(cases = count) |>
arrange(country, year)
t2_cases
t2_population <- filter(table2, type == "population") |>
rename(population = count) |>
arrange(country, year)
t2_population
merge(t2_cases,t2_population,by=c("country","year"))
#| results: "asis"
#| echo: false
source("_common.R")
#| label: fig-rstudio-script
#| echo: false
#| out-width: ~
#| fig-cap: >
#|   Opening the script editor adds a new pane at the top-left of the
#|   IDE.
#| fig-alt: >
#|   RStudio IDE with Editor, Console, and Output highlighted.
knitr::include_graphics("diagrams/rstudio/script.png", dpi = 270)
#| echo: false
#| out-width: ~
#| fig-alt: >
#|   Script editor with the script x y <- 10. A red X indicates that there is
#|   syntax error. The syntax error is also highlighted with a red squiggly line.
knitr::include_graphics("screenshots/rstudio-diagnostic.png")
#| echo: false
#| out-width: ~
#| fig-alt: >
#|   Script editor with the script x y <- 10. A red X indicates that there is
#|   syntax error. The syntax error is also highlighted with a red squiggly line.
#|   Hovering over the X shows a text box with the text unexpected token y and
#|   unexpected token <-.
knitr::include_graphics("screenshots/rstudio-diagnostic-tip.png")
#| echo: false
#| out-width: ~
#| fig-alt: >
#|   Script editor with the script 3 == NA. A yellow exclamation mark
#|   indicates that there may be a potential problem. Hovering over the
#|   exclamation mark shows a text box with the text use is.na to check
#|   whether expression evaluates to NA.
knitr::include_graphics("screenshots/rstudio-diagnostic-warn.png")
#| label: fig-blank-slate
#| echo: false
#| fig-cap: >
#|   Copy these options in your RStudio options to always start your
#|   RStudio session with a clean slate.
#| fig-alt: >
#|   RStudio Global Options window where the option Restore .RData into workspace
#|   at startup is not checked. Also, the option Save workspace to .RData
#|   on exit is set to Never.
#| out-width: ~
knitr::include_graphics("diagrams/rstudio/clean-slate.png", dpi = 270)
#| echo: false
#| fig-alt: >
#|   The Console tab shows the current working directory as
#|   ~/Documents/r4ds.
#| out-width: ~
knitr::include_graphics("screenshots/rstudio-wd.png")
#| label: fig-new-project
#| echo: false
#| fig-cap: >
#|   To create new project: (top) first click New Directory, then (middle)
#|   click New Project, then (bottom) fill in the directory (project) name,
#|   choose a good subdirectory for its home and click Create Project.
#| fig-alt: >
#|   Three screenshots of the New Project menu. In the first screenshot,
#|   the Create Project window is shown and New Directory is selected.
#|   In the second screenshot, the Project Type window is shown and
#|   Empty Project is selected. In the third screenshot, the Create New
#|   Project  window is shown and the directory name is given as r4ds and
#|   the project is being created as subdirectory of the Desktop.
#| out-width: ~
knitr::include_graphics("diagrams/new-project.png")
#| label: fig-rstudio-script
#| echo: false
#| out-width: ~
#| fig-cap: >
#|   Opening the script editor adds a new pane at the top-left of the
#|   IDE.
#| fig-alt: >
#|   RStudio IDE with Editor, Console, and Output highlighted.
knitr::include_graphics("diagrams/rstudio/script.png", dpi = 270)
not_cancelled <- flights |>
filter(!is.na(dep_delay)█, !is.na(arr_delay))
not_cancelled <- flights |>
filter(!is.na(dep_delay), !is.na(arr_delay))
library(dplyr)
library(nycflights13)
not_cancelled <- flights |>
filter(!is.na(dep_delay), !is.na(arr_delay))
not_cancelled |>
group_by(year, month, day) |>
summarize(mean = mean(dep_delay))
█
not_cancelled <- flights |>
filter(!is.na(dep_delay)█, !is.na(arr_delay))
not_cancelled <- flights |>
filter(!is.na(dep_delay), !is.na(arr_delay))
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
#| eval: false
getwd()
#> [1] "/Users/hadley/Documents/r4ds"
#| label: toy-line
#| eval: false
library(tidyverse)
ggplot(diamonds, aes(x = carat, y = price)) +
geom_hex()
ggsave("diamonds.png")
write_csv(diamonds, "data/diamonds.csv")
#| label: toy-line
#| eval: false
library(tidyverse)
ggplot(diamonds, aes(x = carat, y = price)) +
geom_hex()
ggsave("diamonds.png")
write_csv(diamonds, "data/diamonds.csv")
install.packages(c("BiocManager", "broom", "bslib", "curl", "DEoptimR", "gargle", "googledrive", "googlesheets4", "jsonlite", "knitr", "kohonen", "locfit", "maptools", "matrixStats", "osmdata", "parallelly", "plotly", "RcppArmadillo", "reticulate", "rgdal", "rgeos", "rmarkdown", "scattermore", "sf", "sp", "stringfish", "styler", "sys", "usethis"))
